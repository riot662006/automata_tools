from automata.automaton import Epsilon
from automata.operation_funcs import kleene_star
from tests.conftest import make_nfa


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ”¹ 1) Basic star on a+ : (a+)*
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def test_kleene_star_basic_structure_and_prefixing():
    # a+ : q0 -a-> q1, q1 -a-> q1, F={q1}
    nfa = make_nfa(
        Q={"q0", "q1"},
        Î£={"a"},
        Î´={
            ("q0", "a"): {"q1"},
            ("q1", "a"): {"q1"},
        },
        q0="q0",
        F={"q1"},
    )

    s = kleene_star(nfa, should_minimize=False)

    # Î£ preserved
    assert s.Î£ == {"a"}

    # New start and prefixed copies
    assert s.q0 == "q_start"
    assert {"q_start", "nfa_q0", "nfa_q1"}.issubset(s.Q)

    # F includes new start and all prefixed accepts
    assert "q_start" in s.F and "nfa_q1" in s.F

    # Îµ from new start to original start
    assert s.Î´[("q_start", Epsilon)] == frozenset({"nfa_q0"})

    # All original transitions copied with prefix
    assert s.Î´[("nfa_q0", "a")] == frozenset({"nfa_q1"})
    assert s.Î´[("nfa_q1", "a")] == frozenset({"nfa_q1"})

    # Îµ back-edges from each accepting state to original start
    assert s.Î´[("nfa_q1", Epsilon)] == frozenset({"nfa_q0"})


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ”¹ 2) Input already accepts Îµ (q0 âˆˆ F) â†’ star still has q_start in F
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def test_kleene_star_when_input_accepts_epsilon():
    # Îµ-language: start is accepting, no edges
    nfa = make_nfa(
        Q={"s"},
        Î£=set(),
        Î´={},
        q0="s",
        F={"s"},
    )

    s = kleene_star(nfa, should_minimize=False)

    # q_start is accepting and Îµ-edge to nfa_s exists
    assert "q_start" in s.F and "nfa_s" in s.F
    assert s.Î´[("q_start", Epsilon)] == frozenset({"nfa_s"})

    # Since q0âˆˆF, star adds Îµ from nfa_s back to nfa_s (loop via spec)
    assert s.Î´[("nfa_s", Epsilon)] == frozenset({"nfa_s"})


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ”¹ 3) With minimization ON: input has empty language â†’ star collapses to {Îµ}
#     (only q_start remains, accepting, no edges)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def test_kleene_star_minimize_on_empty_language_input():
    # accepts âˆ… : no accepting states, no edges
    nfa = make_nfa(
        Q={"x0"},
        Î£={"a"},
        Î´={},
        q0="x0",
        F=set(),
    )

    s = kleene_star(nfa, should_minimize=True)

    # Minimizer should trim all dead prefixed states; keep only q_start accepting Îµ
    assert s.Q == {"q_start"}
    assert s.F == {"q_start"}
    assert s.Î´ == {}
    # Î£ may remain as original Î£ or be trimmed by your impl; allow either:
    assert s.Î£ == {"a"} or s.Î£ == set()


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ”¹ 4) Multiple accepting states â†’ each gets Îµ back to start
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def test_kleene_star_multiple_accepting_states_back_edges():
    nfa = make_nfa(
        Q={"q0", "f1", "f2"},
        Î£={"a"},
        Î´={
            ("q0", "a"): {"f1", "f2"},
            ("f1", "a"): {"f1"},
            ("f2", "a"): {"f2"},
        },
        q0="q0",
        F={"f1", "f2"},
    )

    s = kleene_star(nfa, should_minimize=False)

    # Both accepting states should have Îµ back to original start
    assert s.Î´[("nfa_f1", Epsilon)] == frozenset({"nfa_q0"})
    assert s.Î´[("nfa_f2", Epsilon)] == frozenset({"nfa_q0"})

    # F contains q_start and both prefixed accepts
    assert {"q_start", "nfa_f1", "nfa_f2"}.issubset(s.F)


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ”¹ 5) No cross-symbol leakage; only original alphabet used
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def test_kleene_star_preserves_alphabet_only():
    nfa = make_nfa(
        Q={"q0", "q1"},
        Î£={"x"},
        Î´={("q0", "x"): {"q1"}, ("q1", "x"): {"q1"}},
        q0="q0",
        F={"q1"},
    )

    s = kleene_star(nfa, should_minimize=False)

    assert s.Î£ == {"x"}
    # No invented transitions on other symbols
    assert ("nfa_q0", "y") not in s.Î´ and ("nfa_q1", "y") not in s.Î´
